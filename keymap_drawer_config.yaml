draw_config:
  key_w: 70.0
  key_h: 66.0
  split_gap: 30.0
  combo_w: 28.0
  combo_h: 26.0
  key_rx: 6.0
  key_ry: 6.0
  dark_mode: false
  n_columns: 1
  separate_combo_diagrams: false
  combo_diagrams_scale: 2
  inner_pad_w: 0.0
  inner_pad_h: 0.0
  outer_pad_w: 30.0
  outer_pad_h: 56.0
  line_spacing: 0.85
  arc_radius: 6.0
  append_colon_to_layer_header: true
  small_pad: 15.0
  legend_rel_x: 0.0
  legend_rel_y: -5.0
  draw_key_sides: true
  key_side_pars:
    rel_x: 0
    rel_y: 4.5
    rel_w: 12.5
    rel_h: 15.0
    rx: 3
    ry: 3
  svg_extra_style: |
    /* inherit to force styles through use tags*/
    svg path {
        fill: inherit;
    }
    /* font and background color specifications */
    svg.keymap {
        font-family: SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;
        font-size: 16px;
        font-kerning: normal;
        text-rendering: optimizeLegibility;
        fill: #24292e;
        /* font-weight: bold; */
    }

    /* default key background styling  */
    rect.key-background, rect.held-background, rect.ghost-background {
        fill: black
    }

    /* default key styling */
    rect.key, rect.key-side {
        fill: #f6f8fa;
        stroke: #000000;
        stroke-width: 0.75;
    }

    /* default key styling */
    rect.key {
        stroke: #000000;
        stroke-width: 0.2;
    }

    /* default key side styling */
    rect.key-side, rect.held-side, rect.ghost-side {
        opacity: 0.9;
    }

    /* color accent for combo boxes */
    rect.combo {
        fill: #cdf;
    }

    /* color accent for held keys */
    rect.held, rect.combo.held, rect.held-side {
        fill: #fdd;
    }

    /* color accent for ghost (optional) keys */
    rect.ghost, rect.combo.ghost, rect.ghost-side {
        stroke-dasharray: 4, 4;
        stroke-width: 2;
    }

    text {
        text-anchor: middle;
        dominant-baseline: middle;
    }

    /* styling for layer labels */
    text.label {
        font-weight: bold;
        text-anchor: left;
        fill: black;
        stroke: white;
        stroke-width: 2;
        paint-order: stroke;
    }

    /* styling for combo tap, and key hold/shifted label text */
    text.combo, text.hold, text.shifted {
        font-size: 13px;
    }

    text.hold {
        text-anchor: middle;
        dominant-baseline: auto;
    }

    text.shifted {
        text-anchor: middle;
        dominant-baseline: hanging;
    }

    /* styling for hold/shifted label text in combo box */
    text.combo.hold, text.combo.shifted {
        font-size: 13px;
    }

    /* lighter symbol for transparent keys */
    text.trans {
        fill: #7b7e81;
    }

    /* styling for combo dendrons */
    path.combo {
        stroke-width: 1;
        stroke: gray;
        fill: none;
    }

    /* Start Tabler Icons Cleanup */
    /* cannot use height/width with glyphs */
    .icon-tabler > path {
        fill: inherit;
        stroke: inherit;
    }
    /* hide tabler's default box */
    .icon-tabler > path[stroke="none"][fill="none"] {
        visibility: collapse;
    }
    /* End Tabler Icons Cleanup */

    /* Start Layers Colors */

    .layer-default rect.key, .layer-default rect.key-side,
    rect.key.layer-hold, rect.key-side.layer-hold {
        fill: #b5b5b5;
    }
    .layer-nav rect.key, .layer-nav rect.key-side,
    rect.key.hold-NAV, rect.key-side.hold-NAV, .hold-NAV.hold {
        fill: #67a0d6;
    }
    .layer-mouse rect.key, .layer-mouse rect.key-side,
    rect.key.hold-MOUSE, rect.key-side.hold-MOUSE, .hold-MOUSE.hold {
        fill: #76a5af;
    }
    .layer-sym rect.key, .layer-sym rect.key-side,
    rect.key.hold-SYM, rect.key-side.hold-SYM, .hold-SYM.hold {
        fill: #93c47d;
    }
    .layer-num rect.key, .layer-num rect.key-side,
    rect.key.hold-NUM, rect.key-side.hold-NUM, .hold-NUM.hold {
        fill: #e06666;
    }
    .layer-func rect.key, .layer-func rect.key-side,
    rect.key.hold-FUN, rect.key-side.hold-FUN, .hold-FUN.hold {
        fill: #ffd966;
    }
    .layer-adj rect.key, .layer-adj rect.key-side,
    rect.key.hold-ADJ, rect.key-side.hold-ADJ, .hold-ADJ.hold {
        fill: #8e7cc3;
    }

    /* .hold-NAV.hold {
        fill: #0392cf;
    }
    .hold-MOUSE.hold {
        fill: #76a5af;
    }
    .hold-SYM.hold {
        fill: #108500;
    }
    .hold-NUM.hold {
        fill: #ee4035;
    }
    .hold-FUN.hold {
        fill: #fdf498;
    }
    .hold-ADJ.hold {
        fill: #a100ba;
    } */

    rect.key.layer-hold, rect.key-side.layer-hold {
        opacity: 0.3
    }

    /* End Layers Colors */
  footer_text: ''
  shrink_wide_legends: 7
  style_layer_activators: true
  glyph_tap_size: 14
  glyph_hold_size: 12
  glyph_shifted_size: 10
  glyphs: {}
  glyph_urls:
    tabler: https://tabler-icons.io/static/tabler-icons/icons/{}.svg
    mdi: https://raw.githubusercontent.com/Templarian/MaterialDesign-SVG/master/svg/{}.svg
    mdil: https://raw.githubusercontent.com/Pictogrammers/MaterialDesignLight/master/svg/{}.svg
    material: https://fonts.gstatic.com/s/i/short-term/release/materialsymbolsoutlined/{}/default/48px.svg
  use_local_cache: true
parse_config:
  layer_names: [default, nav, mouse, sym, func, num, adj]
  preprocess: true
  skip_binding_parsing: false
  raw_binding_map: {
    '&bootloader': 'BOOT',

    '&mmv MOVE_UP': '‚ñ≤ MOUSE',
    '&mmv MOVE_DOWN': '‚ñº MOUSE',
    '&mmv MOVE_LEFT': '‚óÄ MOUSE',
    '&mmv MOVE_RIGHT': '‚ñ∂ MOUSE',

    '&msc SCRL_UP': '‚ñ≥ SCROLL',
    '&msc SCRL_DOWN': '‚ñΩ SCROLL',
    '&msc SCRL_LEFT': '‚óÅ SCROLL',
    '&msc SCRL_RIGHT': '‚ñ∑ SCROLL',

    '&mkp LCLK': 'LEFT CLICK',
    '&mkp RCLK': 'RIGHT CLICK',
    '&mkp MCLK': 'MIDDLE CLICK',
    '&mkp MB4': '‚éó',
    '&mkp MB5': '‚éò',

    '&bm': '`',
    '&sqm': '''',
    '&dqm': '"',
    '&lca_tab': 'CTRL+ ‚å•+‚≠æ'

  }
  sticky_label: sticky
  toggle_label: toggle
  tap_toggle_label: tap-toggle
  trans_legend:
    t: ‚ñΩ
    type: trans
  layer_legend_map: {}
  mark_alternate_layer_activators: false
  modifier_fn_map:
    left_ctrl: Ctl
    right_ctrl: Ctl
    left_shift: Sft
    right_shift: Sft
    left_alt: Alt
    right_alt: AltGr
    left_gui: Gui
    right_gui: Gui
    keycode_combiner: '{mods}+{key}'
    mod_combiner: '{mod_1}+{mod_2}'
    special_combinations:
      left_ctrl+left_alt+left_gui+left_shift: Hyper
      left_ctrl+left_alt+left_shift: Meh
  qmk_remove_keycode_prefix:
  - KC_
  qmk_keycode_map:
    XXXXXXX: ''
    'NO': ''
    MINUS: '-'
    MINS: '-'
    EQUAL: '='
    EQL: '='
    LEFT_BRACKET: '['
    LBRC: '['
    RIGHT_BRACKET: ']'
    RBRC: ']'
    BACKSLASH: \
    BSLS: \
    NONUS_HASH: '#'
    NUHS: '#'
    SEMICOLON: ;
    SCLN: ;
    QUOTE: ''''
    QUOT: ''''
    GRAVE: '`'
    GRV: '`'
    COMMA: ','
    COMM: ','
    DOT: .
    SLASH: /
    SLSH: /
    TILDE: '~'
    TILD: '~'
    EXCLAIM: '!'
    EXLM: '!'
    AT: '@'
    HASH: '#'
    DOLLAR: $
    DLR: $
    PERCENT: '%'
    PERC: '%'
    CIRCUMFLEX: ^
    CIRC: ^
    AMPERSAND: '&'
    AMPR: '&'
    ASTERISK: '*'
    ASTR: '*'
    LEFT_PAREN: (
    LPRN: (
    RIGHT_PAREN: )
    RPRN: )
    UNDERSCORE: _
    UNDS: _
    PLUS: +
    LEFT_CURLY_BRACE: '{'
    LCBR: '{'
    RIGHT_CURLY_BRACE: '}'
    RCBR: '}'
    PIPE: '|'
    COLON: ':'
    COLN: ':'
    DOUBLE_QUOTE: '"'
    DQUO: '"'
    DQT: '"'
    LEFT_ANGLE_BRACKET: <
    LABK: <
    LT: <
    RIGHT_ANGLE_BRACKET: '>'
    RABK: '>'
    GT: '>'
    QUESTION: '?'
    QUES: '?'
  zmk_remove_keycode_prefix: []
  zmk_keycode_map:
    EXCLAMATION: '!'
    EXCL: '!'
    AT_SIGN: '@'
    AT: '@'
    HASH: '#'
    POUND: '#'
    DOLLAR: $
    DLLR: $
    PERCENT: '%'
    PRCNT: '%'
    CARET: '^ INTL.'
    AMPERSAND: '&'
    AMPS: '&'
    ASTERISK: '*'
    ASTRK: '*'
    STAR: '*'
    LEFT_PARENTHESIS: (
    LPAR: (
    RIGHT_PARENTHESIS: )
    RPAR: )
    EQUAL: '='
    PLUS: +
    MINUS: '-'
    UNDERSCORE: _
    UNDER: _
    SLASH: /
    FSLH: /
    QUESTION: '?'
    QMARK: '?'
    BACKSLASH: \
    BSLH: \
    PIPE: '|'
    NON_US_BACKSLASH: \
    PIPE2: '|'
    NON_US_BSLH: '|'
    SEMICOLON: ;
    SEMI: ;
    COLON: ':'
    SINGLE_QUOTE: ''' INTL.'
    SQT: ''' INTL.'
    APOSTROPHE: ''' INTL.'
    APOS: ''' INTL.'
    DOUBLE_QUOTES: '" INTL.'
    DQT: '" INTL.'
    COMMA: ','
    LESS_THAN: <
    LT: <
    PERIOD: .
    DOT: .
    GREATER_THAN: '>'
    GT: '>'
    LEFT_BRACKET: '['
    LBKT: '['
    LEFT_BRACE: '{'
    LBRC: '{'
    RIGHT_BRACKET: ']'
    RBKT: ']'
    RIGHT_BRACE: '}'
    RBRC: '}'
    GRAVE: '` INTL.'
    TILDE: '~ INTL.'
    NON_US_HASH: '#'
    NUHS: '#'
    TILDE2: '~'
    
    UP: '‚ñ≤'
    DOWN: '‚ñº'
    LEFT: '‚óÄ'
    RIGHT: '‚ñ∂'
    SPACE: '‚ê£'
    TAB: '‚≠æ'
    ENTER: '‚èé'
    DEL: '‚å´'
    BSPC: '‚å¶'

    LGUI: '‚åò'
    RGUI: '‚åò'
    LALT: '‚å•'
    RALT: '‚å•'
    LCTL: 'CTRL'
    RCTL: 'CTRL'
    LSHIFT: '‚áß'
    RSHIFT: '‚áß'

    ESC: 'ESC'
    PG_UP: 'PAG‚ñ≤'
    PG_DN: 'PAG‚ñº'
    HOME: 'HOME'
    END: 'END'
    K_CMENU: '‚ò∞'
    CAPS: 'üÑ∞ CAPS'
    KP_NUM: 'NUM'
    SLCK: 'SCROLL LOCK'
    INS: '‚éÄINS'
    PSCRN: '‚éô'

    K_UNDO: '‚Ü∂'
    K_REDO: '‚Ü∑'
    K_COPY: 'COPY'
    K_CUT: '‚úÇ'
    K_PASTE: 'PASTE'

    C_MUTE: 'üï®'
    C_VOL_UP: 'üï™'
    C_VOL_DN: 'üï©'
    C_PLAY_PAUSE: '‚èØ'
    C_PREV: '‚èÆ'
    C_NEXT: '‚è≠'
    C_RW: 'REWIND'
    C_FF: 'FAST FORW'
    C_PAUSE: '‚è∏'

  zmk_combos: {}
  zmk_preamble: '#define KEYMAP_DRAWER'
  zmk_additional_includes: []
