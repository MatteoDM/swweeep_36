draw_config:
  key_w: 70.0
  key_h: 66.0
  split_gap: 30.0
  combo_w: 28.0
  combo_h: 26.0
  key_rx: 6.0
  key_ry: 6.0
  inner_pad_w: 0.0
  inner_pad_h: 0.0
  outer_pad_w: 30.0
  outer_pad_h: 56.0
  line_spacing: 0.85
  arc_radius: 6.0
  append_colon_to_layer_header: false
  small_pad: 15.0
  legend_rel_x: 0.0
  legend_rel_y: -5.0
  keys_style: base
  key_base_tile_rel_x: 0.0
  key_base_tile_rel_y: -4.5
  key_base_tile_rel_w: -12.5
  key_base_tile_rel_h: -15.0
  key_base_tile_rx: 3
  key_base_tile_ry: 3
  svg_style: |
    /* inherit to force styles through use tags*/
    svg path {
        fill: inherit;
    }
    /* font and background color specifications */
    svg.keymap {
        font-family: SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;
        font-size: 16px;
        font-kerning: normal;
        text-rendering: optimizeLegibility;
        fill: #24292e;
        /* font-weight: bold; */
    }

    /* default key background styling  */
    rect.key-background, rect.held-background, rect.ghost-background {
        fill: black
    }

    /* default key styling */
    rect.key, rect.key-side {
        fill: #f6f8fa;
        stroke: #000000;
        stroke-width: 0.75;
    }

    /* default key styling */
    rect.key {
        stroke: #000000;
        stroke-width: 0.2;
    }

    /* default key side styling */
    rect.key-side, rect.held-side, rect.ghost-side {
        opacity: 0.9;
    }

    /* color accent for combo boxes */
    rect.combo {
        fill: #cdf;
    }

    /* color accent for held keys */
    rect.held, rect.combo.held, rect.held-side {
        fill: #fdd;
    }

    /* color accent for ghost (optional) keys */
    rect.ghost, rect.combo.ghost, rect.ghost-side {
        stroke-dasharray: 4, 4;
        stroke-width: 2;
    }

    text {
        text-anchor: middle;
        dominant-baseline: middle;
    }

    /* styling for layer labels */
    text.label {
        font-weight: bold;
        text-anchor: left;
        fill: black;
        stroke: white;
        stroke-width: 2;
        paint-order: stroke;
    }

    /* styling for combo tap, and key hold/shifted label text */
    text.combo, text.hold, text.shifted {
        font-size: 13px;
    }

    text.hold {
        text-anchor: middle;
        dominant-baseline: auto;
    }

    text.shifted {
        text-anchor: middle;
        dominant-baseline: hanging;
    }

    /* styling for hold/shifted label text in combo box */
    text.combo.hold, text.combo.shifted {
        font-size: 13px;
    }

    /* lighter symbol for transparent keys */
    text.trans {
        fill: #7b7e81;
    }

    /* styling for combo dendrons */
    path.combo {
        stroke-width: 1;
        stroke: gray;
        fill: none;
    }

    /* Start Tabler Icons Cleanup */
    /* cannot use height/width with glyphs */
    .icon-tabler > path {
        fill: inherit;
        stroke: inherit;
    }
    /* hide tabler's default box */
    .icon-tabler > path[stroke="none"][fill="none"] {
        visibility: collapse;
    }
    /* End Tabler Icons Cleanup */

    /* Start Layers Colors */

    .layer-QWERTY rect.key, .layer-QWERTY rect.key-side,
    .layer-CLMK rect.key, .layer-CLMK rect.key-side,
    .layer-CLMK-DH rect.key, .layer-CLMK-DH rect.key-side,
    rect.key.layer-hold, rect.key-side.layer-hold {
        fill: #b5b5b5;
    }
    .layer-NAV rect.key, .layer-NAV rect.key-side,
    rect.key.hold-NAV, rect.key-side.hold-NAV, .hold-NAV.hold {
        fill: #67a0d6;
    }
    .layer-MOUSE rect.key, .layer-MOUSE rect.key-side,
    rect.key.hold-MOUSE, rect.key-side.hold-MOUSE, .hold-MOUSE.hold {
        fill: #76a5af;
    }
    .layer-SYM rect.key, .layer-SYM rect.key-side,
    rect.key.hold-SYM, rect.key-side.hold-SYM, .hold-SYM.hold {
        fill: #93c47d;
    }
    .layer-NUM rect.key, .layer-NUM rect.key-side,
    rect.key.hold-NUM, rect.key-side.hold-NUM, .hold-NUM.hold {
        fill: #e06666;
    }
    .layer-FUNC rect.key, .layer-FUNC rect.key-side,
    rect.key.hold-FUN, rect.key-side.hold-FUN, .hold-FUN.hold {
        fill: #ffd966;
    }
    .layer-ADJ rect.key, .layer-ADJ rect.key-side,
    rect.key.hold-ADJ, rect.key-side.hold-ADJ, .hold-ADJ.hold {
        fill: #8e7cc3;
    }

    /* .hold-NAV.hold {
        fill: #0392cf;
    }
    .hold-MOUSE.hold {
        fill: #76a5af;
    }
    .hold-SYM.hold {
        fill: #108500;
    }
    .hold-NUM.hold {
        fill: #ee4035;
    }
    .hold-FUN.hold {
        fill: #fdf498;
    }
    .hold-ADJ.hold {
        fill: #a100ba;
    } */

    rect.key.layer-hold, rect.key-side.layer-hold {
        opacity: 0.3
    }

    /* End Layers Colors */
  shrink_wide_legends: 7
  glyph_tap_size: 14
  glyph_hold_size: 12
  glyph_shifted_size: 10
  glyphs: {}
  glyph_urls:
    tabler: https://tabler-icons.io/static/tabler-icons/icons/{}.svg
    mdi: https://raw.githubusercontent.com/Templarian/MaterialDesign-SVG/master/svg/{}.svg
    mdil: https://raw.githubusercontent.com/Pictogrammers/MaterialDesignLight/master/svg/{}.svg
    material: https://fonts.gstatic.com/s/i/short-term/release/materialsymbolsoutlined/{}/default/48px.svg
  use_local_cache: true
parse_config:
  layer_names: ['QWERTY', 1, 2, 3, 4, 5, 6, 7, 8]
  preprocess: true
  skip_binding_parsing: false
  raw_binding_map:
    QK_BOOT: 'BOOT'
    # home row
    LGUI_T(KC_A): {t: 'A' , h: ⌘}
    LALT_T(KC_S): {t: 'S' , h: ⌥}
    LCTL_T(KC_D): {t: 'D' , h: CTRL}
    LSFT_T(KC_F): {t: 'F' , h: ⇧}
    RGUI_T(KC_SCLN): {t: ';', h: ⌘}
    LALT_T(KC_L): {t: 'L' , h: ⌥}
    RCTL_T(KC_K): {t: 'K' , h: CTRL}
    RSFT_T(KC_J): {t: 'J' , h: ⇧}
    LALT_T(KC_R): {t: 'R' , h: ⌥}
    LCTL_T(KC_S): {t: 'S' , h: CTRL}
    LSFT_T(KC_T): {t: 'T' , h: ⇧}
    RGUI_T(KC_O): {t: 'O' , h: ⌘}
    LALT_T(KC_I): {t: 'I' , h: ⌥}
    RCTL_T(KC_E): {t: 'E' , h: CTRL}
    RSFT_T(KC_N): {t: 'N' , h: ⇧}
    HR_GUI_A: {t: 'A' , h: ⌘}
    HR_ALT_S: {t: 'S' , h: ⌥}
    HR_CTL_D: {t: 'D' , h: CTRL}
    HR_SFT_F: {t: 'F' , h: ⇧}
    HR_GU_SC: {t: ';', h: ⌘}
    HR_ALT_L: {t: 'L' , h: ⌥}
    HR_CTL_K: {t: 'K' , h: CTRL}
    HR_SFT_J: {t: 'J' , h: ⇧}
    HR_ALT_R: {t: 'R' , h: ⌥}
    HR_CTL_S: {t: 'S' , h: CTRL}
    HR_SFT_T: {t: 'T' , h: ⇧}
    HR_GUI_O: {t: 'O' , h: ⌘}
    HR_ALT_I: {t: 'I' , h: ⌥}
    HR_CTL_E: {t: 'E' , h: CTRL}
    HR_SFT_N: {t: 'N' , h: ⇧}
    # shortcuts
    LCTL(KC_Z): '↶'
    LCTL(KC_X): '✂'
    LCTL(KC_C): 'CTRL C'
    LCTL(KC_V): 'CTRL V'
    LCTL(KC_Y): '↷'
    LCA(KC_TAB): 'CTRL ⌥ ⭾'
    SH_CTL_Z: '↶'
    SH_CTL_X: '✂'
    SH_CTL_C: 'CTRL C'
    SH_CTL_V: 'CTRL V'
    SH_CTL_Y: '↷'
    SH_CA_TB: 'CTRL ⌥⭾'
    # layers
    DF(_QWERTY): 'QWERTY'
    DF(_COLEMAK): 'CLMK'
    DF(_COLEMAK_DH): 'CLMK DH'
    LT(_SYMBOLS,KC_BSPC): {t: ⌦, h: 'SYM', type: ''}
    LT(_MOUSE,KC_DEL): {t: ⌫, h: 'MOUSE', type: ''}
    LT(_NUMERIC,KC_ENT): {t: ⏎, h: 'NUM', type: ''}
    LT(_NAV,KC_TAB): {t: ⭾, h: 'NAV', type: ''}
    LT(_FUNCTIONS,KC_ESC): {t: 'ESC', h: 'FUNC', type: ''}
    LT(_ADJUST,KC_Q): {t: 'Q', h: 'ADJ', type: ''}
    LT(_ADJUST,KC_P): {t: 'P', h: 'ADJ', type: ''}
    LT(_ADJUST,KC_SCLN): {t: ';', h: 'ADJ', type: ''}
    DF_QWERT: 'QWERTY'
    DF_CLMAK: 'CLMK'
    DF_CLKDH: 'CLMK DH'
    LSYM_BSP: {t: ⌦, h: 'SYM', type: 'hold-SYM'}
    LMOU_DEL: {t: ⌫, h: 'MOUSE', type: 'hold-MOUSE'}
    LNUM_ENT: {t: ⏎, h: 'NUM', type: 'hold-NUM'}
    LNAV_TAB: {t: ⭾, h: 'NAV', type: 'hold-NAV'}
    LFUN_ESC: {t: 'ESC', h: 'FUNC', type: 'hold-FUN'}
    LADJ_Q: {t: 'Q', h: 'ADJ', type: 'hold-ADJ'}
    LADJ_P: {t: 'P', h: 'ADJ', type: 'hold-ADJ'}
    LADJ_SCL: {t: ';', h: 'ADJ', type: 'hold-ADJ'}
    # macros
    ASC_GRV: '` INTL.'
    ASC_QUOT: ''' INTL.'
    ASC_DQUO: '" INTL.'
    ASC_TILD: '~ INTL.'
    ASC_CIRC: '^ INTL.'
    # others
    RGB_TOG: RGB TOGGLE
    RGB_SPI: RGB SPEED+
    RGB_SPD: RGB SPEED-
    RGB_HUI: RGB HUE+
    RGB_HUD: RGB HUD-
    RGB_SAI: RGB SAT+
    RGB_SAD: RGB SAT-
    RGB_VAI: RGB VAL+
    RGB_VAD: RGB VAL-
    RGB_MOD: RGB MODE+
    RGB_MOD: RGB MODE-
    FD_TIME: FADE TIME
    FD_HUE: FADE HUE
    FD_SAT: FADE SAT
    FD_VAL: FADE VAL
    FD_VALM: FADE MIN
    __TRNS__: ▽
    __HOLD__: {t: '◆', type: 'layer-hold'}
    ________: ''

  sticky_label: sticky
  trans_legend:
    t: ▽
    type: trans
  mark_alternate_layer_activators: false
  qmk_keycode_map:
    XXXXXXX: ''
    'NO': ''
    MINUS: '-'
    MINS: '-'
    EQUAL: '='
    EQL: '='
    LEFT_BRACKET: '['
    LBRC: '['
    RIGHT_BRACKET: ']'
    RBRC: ']'
    BACKSLASH: \
    BSLS: \
    NONUS_HASH: '#'
    NUHS: '#'
    SEMICOLON: ;
    SCLN: ;
    QUOTE: ''''
    QUOT: ''''
    GRAVE: '`'
    GRV: '`'
    COMMA: ','
    COMM: ','
    DOT: .
    SLASH: /
    SLSH: /
    TILDE: '~'
    TILD: '~'
    EXCLAIM: '!'
    EXLM: '!'
    AT: '@'
    HASH: '#'
    DOLLAR: $
    DLR: $
    PERCENT: '%'
    PERC: '%'
    CIRCUMFLEX: ^
    CIRC: ^
    AMPERSAND: '&'
    AMPR: '&'
    ASTERISK: '*'
    ASTR: '*'
    LEFT_PAREN: (
    LPRN: (
    RIGHT_PAREN: )
    RPRN: )
    UNDERSCORE: _
    UNDS: _
    PLUS: +
    LEFT_CURLY_BRACE: '{'
    LCBR: '{'
    RIGHT_CURLY_BRACE: '}'
    RCBR: '}'
    PIPE: '|'
    COLON: ':'
    COLN: ':'
    DOUBLE_QUOTE: '"'
    DQUO: '"'
    DQT: '"'
    LEFT_ANGLE_BRACKET: <
    LABK: <
    LT: <
    RIGHT_ANGLE_BRACKET: '>'
    RABK: '>'
    GT: '>'
    QUESTION: '?'
    QUES: '?'

    UP: '⬆'
    DOWN: '⬇'
    LEFT: '⬅'
    RGHT: '⮕'
    SPC: ␣
    TAB: ⭾
    ENT: ⏎
    DEL: '⌦'

    LGUI: ⌘
    RGUI: ⌘
    LALT: ⌥
    RALT: ⌥
    LCTL: CTRL
    RCTL: CTRL
    LSFT: ⇧
    RSFT: ⇧

    ESC: ESC
    PGUP: PAG▲
    PGDN: PAG▼
    HOME: HOME
    APP: ☰
    CAPS: 🄰CAPS
    NUM: NUM
    SCRL: SCROLL LOCK
    INS: ⎀INS
    PSCR: ⎙

    MS_U: ▲ MOUSE
    MS_D: ▼ MOUSE
    MS_L: ◀ MOUSE
    MS_R: ▶ MOUSE
    BTN1: LEFT CLICK
    BTN2: RIGHT CLICK
    BTN3: MIDDLE CLICK
    BTN4: ⎗
    BTN5: ⎘
    WH_U: △ SCROLL
    WH_D: ▽ SCROLL
    WH_L: ◁ SCROLL
    WH_R: ▷ SCROLL
    ACL0: MOUSE ACCEL 1
    ACL1: MOUSE ACCEL 2
    ACL2: MOUSE ACCEL 3

    MRWD: REWIND
    PAUS: PAUSE
    MFFD: FAST FORW
    MPRV: ⏮
    MPLY: ⏯
    MNXT: ⏭
    VOLU: 🕪
    VOLD: 🕩
    MUTE: 🕨

  zmk_keycode_map:
    EXCLAMATION: '!'
    EXCL: '!'
    AT_SIGN: '@'
    AT: '@'
    HASH: '#'
    POUND: '#'
    DOLLAR: $
    DLLR: $
    PERCENT: '%'
    PRCNT: '%'
    CARET: ^
    AMPERSAND: '&'
    AMPS: '&'
    ASTERISK: '*'
    ASTRK: '*'
    STAR: '*'
    LEFT_PARENTHESIS: (
    LPAR: (
    RIGHT_PARENTHESIS: )
    RPAR: )
    EQUAL: '='
    PLUS: +
    MINUS: '-'
    UNDERSCORE: _
    UNDER: _
    SLASH: /
    FSLH: /
    QUESTION: '?'
    QMARK: '?'
    BACKSLASH: \
    BSLH: \
    PIPE: '|'
    NON_US_BACKSLASH: \
    PIPE2: '|'
    NON_US_BSLH: '|'
    SEMICOLON: ;
    SEMI: ;
    COLON: ':'
    SINGLE_QUOTE: ''''
    SQT: ''''
    APOSTROPHE: <
    APOS: .
    DOUBLE_QUOTES: '"'
    DQT: '"'
    COMMA: ','
    LESS_THAN: <
    LT: <
    PERIOD: .
    DOT: .
    GREATER_THAN: '>'
    GT: '>'
    LEFT_BRACKET: '['
    LBKT: '['
    LEFT_BRACE: '{'
    LBRC: '{'
    RIGHT_BRACKET: ']'
    RBKT: ']'
    RIGHT_BRACE: '}'
    RBRC: '}'
    GRAVE: '`'
    TILDE: '~'
    NON_US_HASH: '#'
    NUHS: '#'
    TILDE2: '~'
  zmk_combos: {}
