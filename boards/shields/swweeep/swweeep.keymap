#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <dt-bindings/zmk/pointing.h>

#define DEFAULT 0
#define NAV     1
#define MOUSE   2
#define SYM     3
#define FUNC    4
#define NUM     5
#define ADJ     6

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_capsword {
            timeout-ms = <50>;
            key-positions = <13 16>;
            bindings = <&caps_word>;
            layers = <DEFAULT NAV MOUSE SYM FUNC NUM>;
        };
    };


    behaviors {
        lt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            #global-quick-tap;
            bindings = <&mo>, <&kp>;
            display-name = "Layer-Tap";
        };
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            display-name = "Homerow-Mods";
        };
        hs: homerow_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <175>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <130>;
            bindings = <&kp>, <&kp>;
            display-name = "Homerow-Shift";
        };
	    just_left: left_no_mods {
	          compatible = "zmk,behavior-mod-morph";
	          label = "JUST_LEFT";
	          #binding-cells = <0>;
	          bindings = <&kp LEFT>, <&kp LEFT>;
	          mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
	          keep-mods = <0>;
	    };
    };

    macro {
        pair: pair {
	      label = "PAIR";
	      compatible = "zmk,behavior-macro-two-param";
              #binding-cells = <2>; // Must be 2
	      bindings = <&macro_param_1to1>, <&kp MACRO_PLACEHOLDER>, <&macro_param_2to1>, <&kp MACRO_PLACEHOLDER> ;
	    };

        sqm: macro_sqm {
            label = "SQM";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&pair SQT SPACE>; // Single Quote (')
        };

        dqm: macro_dqm {
            label = "DQM";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&pair DQT SPACE>; // Double Quote (")
        };

        bm: macro_bm {
            label = "BM";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&pair GRAVE SPACE>; // Backtick (`)
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
    &lt ADJ Q   &kp W       &kp E         &kp R       &kp T                                  &kp Y         &kp U         &kp I       &kp O       &lt ADJ P
    &hm LGUI A  &hm LALT S  &hm LCTL D  &hs LSHIFT F  &kp G                                  &kp H         &hs RSHIFT J  &hm RCTL K  &hm LALT L  &hm RGUI SEMI
    &kp Z       &kp X       &kp C       &kp V         &kp B                                  &kp N         &kp M         &kp COMMA   &kp DOT     &kp FSLH
// Riccardo //                          &lt FUNC ESC   &kp SPACE    &lt NAV TAB  &lt NUM ENTER  &lt  SYM BSPC  &lt MOUSE DEL
                                         &lt FUNC BSPC  &lt SYM DEL  &lt NUM ESC  &lt NAV TAB    &lt MOUSE ENTER &kp  SPACE
            >;
        };

        nav_layer {
            bindings = <
    &kp K_REDO  &kp HOME    &kp UP     &kp END      &kp PG_UP                  &trans      &kp CAPS    &kp KP_NUM  &kp INS   &bootloader
    &kp HOME    &kp LEFT    &kp DOWN   &kp RIGHT    &kp PG_DN                  &kp K_MENU  &kp LSHIFT  &kp LCTL    &kp LALT  &kp LGUI
    &kp K_UNDO  &kp K_COPY  &kp K_CUT  &kp K_PASTE  &trans                     &trans      &kp N1      &kp N2      &kp N3    &kp N0
                                       &trans       &trans     &trans  &trans  &trans      &trans
            >;
        };

        mouse_layer {
            bindings = <
    &kp K_REDO  &mkp RCLK      &mmv MOVE_UP   &mkp LCLK       &msc SCRL_UP          &mkp MCLK &mkp LCLK      &msc SCRL_UP   &mkp RCLK       &kp SLCK
    &kp PSCRN   &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &msc SCRL_DOWN        &mkp MB4  &msc SCRL_LEFT &msc SCRL_DOWN &msc SCRL_RIGHT &trans
    &kp K_UNDO  &kp K_COPY     &kp K_CUT      &kp K_PASTE     &trans                &mkp MB5  &trans         &trans         &trans          &trans
                               &mkp LCLK      &mkp RCLK        &trans      &trans &trans    &trans
            >;
        };

        sym_layer {
            bindings = <
    &trans     &kp GRAVE  &kp SQT   &kp DQT    &trans                     &trans    &kp LBRC  &kp RBRC  &kp AT     &trans
    &kp TILDE  &kp AMPS   &kp EXCL  &kp PIPE   &kp PRCNT                  &kp DLLR  &kp LPAR  &kp RPAR  &kp UNDER  &kp HASH
    &kp CARET  &kp LT     &kp GT    &kp EQUAL  &trans                     &trans    &kp LBKT  &kp RBKT  &trans     &trans
                                    &trans     &trans     &trans  &trans  &trans    &trans
            >;
        };

        func_layer {
            bindings = <
    &trans       &trans    &trans            &trans      &kp C_VOL_UP       &trans  &kp F7  &kp F8  &kp F9  &kp F10
    &kp LGUI     &kp LALT  &kp LCTL          &kp LSHIFT  &kp C_VOL_DN       &trans  &kp F4  &kp F5  &kp F6  &kp F11
    &trans       &trans    &kp C_PLAY_PAUSE  &trans      &kp C_MUTE         &trans  &kp F1  &kp F2  &kp F3  &kp F12
                           &trans            &trans      &trans             &trans  &trans  &trans
            >;
        };

        num_layer {
            bindings = <
    &trans    &bm        &sqm       &dqm       &trans                  &trans  &kp N7  &kp N8  &kp N9  &kp COMMA
    &kp FSLH  &kp ASTRK  &kp MINUS  &kp PLUS   &kp PRCNT               &kp N0  &kp N4  &kp N5  &kp N6  &kp EQUAL
    &kp BSLH  &kp LT     &kp GT     &kp EQUAL  &trans                  &kp N0  &kp N1  &kp N2  &kp N3  &kp DOT
                                    &trans     &trans  &trans  &trans  &trans  &trans
            >;
        };

        adj_layer {
            bindings = <
    &trans  &trans  &trans  &trans        &bootloader                 &bootloader        &bt BT_PRV        &bt BT_NXT         &trans        &trans
    &trans  &trans  &trans  &trans        &trans                      &bt BT_CLR         &bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2  &bt BT_SEL 3
    &trans  &trans  &trans  &trans        &trans                      &ext_power EP_TOG  &ext_power EP_ON  &ext_power EP_OFF  &out OUT_USB  &out OUT_BLE
                            &out OUT_BLE  &out OUT_USB  &trans &trans &trans            &trans
            >;
        };

    };
};